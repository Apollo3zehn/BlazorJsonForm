@page "/"
@using System.Text.Json.Schema
@using System.Text.Json.Nodes
@using System.Text.Json
@using NJsonSchema
@using System.ComponentModel.DataAnnotations

@inject ISnackbar Snackbar

<div>

    <div style="display:flex; justify-content: center;">
        <MudSwitch
            @bind-Value="_nullableMode"
            @bind-Value:after="OnModeChanged"
            Color="Color.Secondary"
            Label="Nullable mode">
        </MudSwitch>
    </div>

    <div style="display: flex; gap: 1rem; margin: 1rem;">
        <div style="flex: 1; font-family: 'Courier New', Courier, monospace; font-size: x-small;">
            <MudText Typo="Typo.h4" Style="margin-bottom: 1rem;">Schema</MudText>

            <span>
                @(
                    (MarkupString)(
                        _schema
                            .ToJson()
                            .Replace(" ", "&nbsp;")
                            .Replace("\n", "<br />")
                    )
                )
            </span>
        </div>

        <div style="flex: 1">
            <MudText Typo="Typo.h4" Style="margin-bottom: 1rem;">Form</MudText>

            <JsonForm
                Schema="_schema"
                @bind-Data="_data" />
        </div>

        <div style="flex: 1; font-family: 'Courier New', Courier, monospace; font-size: x-small;">
            <MudText Typo="Typo.h4" Style="margin-bottom: 1rem;">Data</MudText>

            <span>
                @(
                    (MarkupString)(
                        JsonSerializer.Serialize(_data, new JsonSerializerOptions { WriteIndented = true })
                            .Replace(" ", "&nbsp;")
                            .Replace("\n", "<br />")
                    )
                )
            </span>

            <div style="margin-top: 2rem">
                <MudButton 
                    OnClick="() =>
                    {
                        if (_nullableMode)
                            DeserializeAndValidate<Rocket_Nullable>();
                        
                        else
                            DeserializeAndValidate<Rocket>();
                    }"
                    Variant="Variant.Outlined"
                    Color="Color.Primary">
                    Deserialize and Validate
                </MudButton>
            </div>
            
        </div>
    </div>

</div>

@code {

    private bool _nullableMode;

    private JsonNode? _data;

    private JsonSchema _schema = JsonSchema.FromType<Rocket>();

    private void OnModeChanged()
    {
        _schema = _nullableMode
            ? JsonSchema.FromType<Rocket_Nullable>()
            : JsonSchema.FromType<Rocket>();

        _data = default;
    }

    private void DeserializeAndValidate<T>()
    {
        try
        {
            var deserialized = JsonSerializer.Deserialize<T>(
                _data, 
                new JsonSerializerOptions() { RespectNullableAnnotations = true }
            );

            var isValid = true;
            var validationResults = new List<ValidationResult>();

            if (deserialized is null)
            {
                isValid = false;
            }

            else
            {
                isValid = Validator.TryValidateObject(
                    deserialized, 
                    new ValidationContext(deserialized),
                    validationResults,
                    validateAllProperties: true
                );
            }

            if (isValid)
            {
                Snackbar.Add(
                    "The data is valid", 
                    Severity.Success
                );
            }

            else
            {
                Snackbar.Add(
                    $"There were validation errors:\n{string.Join('\n', validationResults)}", 
                    Severity.Error
                );
            }
        }
        catch (JsonException ex)
        {
            Snackbar.Add(
                $"There were deserilization errors: {ex.Message}",
                Severity.Error
            );
        }
    }
}
