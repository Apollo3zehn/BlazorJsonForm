@using Microsoft.AspNetCore.Components.Rendering
@using NJsonSchema
@using System.Text.Json.Nodes
@using System.Text.Json

<div style="display: flex; flex-direction: column;">
    @_renderFragement
</div>

@code {

    private RenderFragment _renderFragement = default!;

    /// <summary>
    /// The JSON schema to create a form for.
    /// </summary>
    [Parameter]
    public JsonSchema Schema { get; set; } = default!;

    /// <summary>
    /// The JSON data store.
    /// </summary>
    [Parameter]
    public JsonNode? Data { get; set; } = default!;

    /// <summary>
    /// The JSON data store event callback.
    /// </summary>
    [Parameter]
    public EventCallback<JsonNode?> DataChanged { get; set; }

    protected override void OnInitialized()
    {
        _renderFragement = builder =>
        {
            var oldData = Data;

            Data = Render(
                "Rocket settings", 
                Schema,
                Data,
                builder,
                isTopLevel: true
            );

            if (JsonSerializer.Serialize(oldData) != JsonSerializer.Serialize(Data) && 
                DataChanged.HasDelegate)
            {
                DataChanged.InvokeAsync(Data);
            }
        };
    }

    private JsonNode? Render(
        string label, 
        JsonSchema schema, 
        JsonNode? data,
        RenderTreeBuilder builder, 
        bool isTopLevel
    )
    {
        var __builder = builder;

        switch (schema.Type)
        {
            case JsonObjectType.Integer:

                if (schema.Enumeration.Any())
                {
                    if (data is null)
                        data = 0;

                    var valueNamePairs = schema
                        .Enumeration
                        .Cast<int>()
                        .Zip(schema.EnumerationNames)
                        .ToList();

                    <MudSelect 
                        T="int" 
                        Label="@label"
                        MultiSelection="schema.IsFlagEnumerable"
                        ToStringFunc="item => valueNamePairs.First(x => x.First == item).Second"
                        @bind-Value:get="data.GetValue<int>()"
                        @bind-Value:set="value => SetValue(value, data)"
                        @bind-SelectedValues:get="FromFlags(data.GetValue<int>())"
                        @bind-SelectedValues:set="value => SetValue(ToFlags(value), data)">

                        @foreach (var valueNamePair in valueNamePairs)
                        {
                            <MudSelectItem 
                                T="int"
                                Value="valueNamePair.First" />
                        }

                    </MudSelect>
                }

                else
                {
                    switch (schema.Format)
                    {
                        // only these number types are recognized by NJsonSchema

                        case "byte":

                            if (data is null)
                                data = (byte)0;

                            <MudNumericField 
                                T="byte" 
                                Label="@label"
                                Min="schema.Minimum.HasValue ? (byte)schema.Minimum.Value : byte.MinValue"
                                Max="schema.Maximum.HasValue ? (byte)schema.Maximum.Value : byte.MaxValue"
                                @bind-Value:get="data.GetValue<byte>()"
                                @bind-Value:set="value => SetValue(value, data)" />

                            break;

                        case "uint64":
                        
                            if (data is null)
                                data = 0UL;

                            <MudNumericField 
                                T="ulong" 
                                Label="@label"
                                Min="schema.Minimum.HasValue ? (ulong)schema.Minimum.Value : ulong.MinValue"
                                Max="schema.Maximum.HasValue ? (ulong)schema.Maximum.Value : ulong.MaxValue"
                                @bind-Value:get="data.GetValue<ulong>()"
                                @bind-Value:set="value => SetValue(value, data)" />

                            break;

                        case "int64":

                            if (data is null)
                                data = 0L;
                        
                            <MudNumericField 
                                T="long" 
                                Label="@label"
                                Min="schema.Minimum.HasValue ? (long)schema.Minimum.Value : long.MinValue"
                                Max="schema.Maximum.HasValue ? (long)schema.Maximum.Value : long.MaxValue"
                                @bind-Value:get="data.GetValue<long>()"
                                @bind-Value:set="value => SetValue(value, data)" />

                            break;

                        default:

                            if (data is null)
                                data = 0;

                            <MudNumericField 
                                T="int" 
                                Label="@label"
                                Min="schema.Minimum.HasValue ? (int)schema.Minimum.Value : int.MinValue"
                                Max="schema.Maximum.HasValue ? (int)schema.Maximum.Value : int.MaxValue"
                                @bind-Value:get="data.GetValue<int>()"
                                @bind-Value:set="value => SetValue(value, data)" />

                            break;
                    }
                }

                break;

            case JsonObjectType.Number:

                if (schema.Format == "double")
                {
                    if (data is null)
                        data = 0.0;

                    <MudNumericField 
                        T="double" 
                        Label="@label"
                        Min="schema.Minimum.HasValue ? (double)schema.Minimum.Value : double.MinValue"
                        Max="schema.Maximum.HasValue ? (double)schema.Maximum.Value : double.MaxValue"
                        @bind-Value:get="data.GetValue<double>()"
                        @bind-Value:set="value => SetValue(value, data)" />
                }

                else
                {
                    throw new Exception("schema.Format != \"double\" is not (yet) supported");
                }

                break;

            case JsonObjectType.Boolean:

                if (data is null)
                    data = false;

                <MudSwitch 
                    Label="@label"
                    Color="Color.Primary"
                    @bind-Value:get="data.GetValue<bool>()"
                    @bind-Value:set="value => SetValue(value, data)" />

                break;

            case JsonObjectType.String:

                if (data is null)
                    data = string.Empty;

                <MudTextField 
                        T="string" 
                        Label="@label"
                        @bind-Value:get="data.GetValue<string>()"
                @bind-Value:set="value => SetValue(value, data)" />

                break;

            case JsonObjectType.String | JsonObjectType.Null:

                if (data is null)
                    data = default;

                @* builder.OpenComponent<MudTextField<string>>(sequence++);
                builder.AddComponentParameter(sequence++, "Label", label);
                builder.CloseComponent(); *@

                break;

            case JsonObjectType.Object:

                data = RenderObject(
                    label, 
                    schema.ActualProperties,
                    (JsonObject?)data,
                    builder, 
                    isTopLevel
                );

                break;

            case JsonObjectType.None:

                if (schema.OneOf.Count == 1)
                {
                    data = Render(
                        label,
                        schema.ActualSchema,
                        data,
                        builder,
                        isTopLevel
                    );
                }

                else
                {
                    throw new Exception("schema.OneOf.Count != 1 is not (yet) supported");
                }

                break;

            case JsonObjectType.Array:

                if (data is null)
                    data = new JsonArray();

                RenderArray(
                    label,
                    schema,
                    (JsonArray)data,
                    builder,
                    isTopLevel
                );

                break;

            default:
                throw new Exception($"{schema.Type} is not (yet) supported");
        }

        return data;
    }

    private JsonObject RenderObject(
        string? title,
        IReadOnlyDictionary<string, JsonSchemaProperty> properties, 
        JsonObject? data,
        RenderTreeBuilder builder,
        bool isTopLevel)
    {
        var __builder = builder;

        if (data is null)
            data = new JsonObject();

        var margin = isTopLevel ? "" : " margin-left: 1rem; margin-top: 1rem; margin-bottom: 1rem;";

        <div style="display: flex; flex-direction: column; gap: 1rem;@margin">

            <MudText Typo="Typo.h6">
                @title
            </MudText>

            @foreach (var entry in properties)
            {
                var (name, propertySchema) = entry;
                var label = propertySchema.Description ?? name;

                data.TryGetPropertyValue(name, out var propertyData);

                data[name] = Render(
                    label, 
                    propertySchema,
                    propertyData,
                    builder,
                    isTopLevel: false
                );
            }

        </div>

        return data;
    }

    private void RenderArray(
        string? title,
        JsonSchema schema,
        JsonArray data,
        RenderTreeBuilder builder,
        bool isTopLevel)
    {
        if (schema.Item is null)
            throw new Exception("schema.Item is null");

        var __builder = builder;
        var margin = isTopLevel ? "" : " margin-left: 1rem; margin-top: 1rem; margin-bottom: 1rem;";

        <div style="display: flex; flex-direction: column; gap: 1rem;@margin">

            <MudText Typo="Typo.h6">
                @title
            </MudText>

            @for (int i = 0; i < data.Count; i++)
            {
                Render(
                    "#" + (i + 1),
                    schema.Item.ActualSchema,
                    data[i],
                    builder,
                    isTopLevel: false
                );
            }

            <div style="margin-left: auto; margin-right: auto;">
                <MudIconButton 
                    Icon="@Icons.Material.Filled.Add"
                    OnClick="() => 
                    {
                        var item = Render(
                            string.Empty,
                            schema.Item.ActualSchema,
                            data: default,
                            /* TODO the builder is useless here */
                            builder: new RenderTreeBuilder(),
                            isTopLevel: false
                        );

                        data.Add(item);

                        if (DataChanged.HasDelegate)
                            DataChanged.InvokeAsync(Data);
                    }" />

            </div>

        </div>
    }

    private void SetValue<T>(T value, JsonNode data)
    {
        data.ReplaceWith(value);

        if (DataChanged.HasDelegate)
            DataChanged.InvokeAsync(Data);
    }

    private IEnumerable<int> FromFlags(int value)
    {
        var result = new List<int>();

        for (int i = 0; i < sizeof(int) * 8; i++)
        {
            var isBitSet = (value & (1 << i)) > 0;

            if (isBitSet)
                result.Add(1 << i);
        }

        return result;
    }

    private int ToFlags(IEnumerable<int> values)
    {
        return values.Sum();
    }
}