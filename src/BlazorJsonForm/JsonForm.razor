@using Microsoft.AspNetCore.Components.Rendering
@using NJsonSchema
@using System.Text.Json.Nodes
@using System.Text.Json

<div style="display: flex; flex-direction: column;">
    @_renderFragement
</div>

@code {

    private RenderFragment _renderFragement = default!;

    /// <summary>
    /// The JSON schema to create a form for.
    /// </summary>
    [Parameter]
    public JsonSchema Schema { get; set; } = default!;

    /// <summary>
    /// The JSON data store.
    /// </summary>
    [Parameter]
    public JsonNode? Data { get; set; } = default!;

    /// <summary>
    /// The JSON data store event callback.
    /// </summary>
    [Parameter]
    public EventCallback<JsonNode?> DataChanged { get; set; }

    protected override void OnInitialized()
    {
        _renderFragement = builder =>
        {
            var oldData = Data;

            Data = Render(
                "Rocket settings", 
                Schema,
                Data,
                builder,
                isTopLevel: true
            );

            if (JsonSerializer.Serialize(oldData) != JsonSerializer.Serialize(Data) && 
                DataChanged.HasDelegate)
            {
                DataChanged.InvokeAsync(Data);
            }
        };
    }

    private JsonNode? Render(
        string label, 
        JsonSchema schema, 
        JsonNode? data,
        RenderTreeBuilder builder, 
        bool isTopLevel
    )
    {
        var __builder = builder;

        switch (schema.Type)
        {
            case JsonObjectType.Integer:

                if (data is null)
                    data = 0;

                if (schema.Enumeration.Any())
                {
                    var valueNamePairs = schema
                        .Enumeration
                        .Cast<int>()
                        .Zip(schema.EnumerationNames)
                        .ToList();

                    <MudSelect 
                        T="int" 
                        Label="@label"
                        ToStringFunc="item => valueNamePairs.First(x => x.First == item).Second"
                        @bind-Value:get="data.GetValue<int>()"
                        @bind-Value:set="value => SetValue(value, data)">

                        @foreach (var valueNamePair in valueNamePairs)
                        {
                            <MudSelectItem 
                                T="int"
                                Value="valueNamePair.First" />
                        }

                    </MudSelect>
                }

                else
                {
                    <MudNumericField 
                        T="int" 
                        Label="@label"
                        @bind-Value:get="data.GetValue<int>()"
                        @bind-Value:set="value => SetValue(value, data)" />

                    //builder.AddComponentParameter(sequence++, "Min", 0);
                    //builder.AddComponentParameter(sequence++, "Max", 10);
                }

                break;

            case JsonObjectType.Number:

                if (schema.Format == "double")
                {
                    if (data is null)
                        data = 0.0;

                    <MudNumericField 
                        T="double" 
                        Label="@label"
                        @bind-Value:get="data.GetValue<double>()"
                        @bind-Value:set="value => SetValue(value, data)" />
                }

                else
                {
                    throw new Exception("schema.Format != \"double\" is not (yet) supported");
                }

                break;

            case JsonObjectType.Boolean:

                if (data is null)
                    data = false;

                <MudSwitch 
                    Label="@label"
                    @bind-Value:get="data.GetValue<bool>()"
                    @bind-Value:set="value => SetValue(value, data)" />

                break;

            case JsonObjectType.String:

                if (data is null)
                    data = string.Empty;

                <MudTextField 
                        T="string" 
                        Label="@label"
                        @bind-Value:get="data.GetValue<string>()"
                @bind-Value:set="value => SetValue(value, data)" />

                break;

            case JsonObjectType.String | JsonObjectType.Null:

                if (data is null)
                    data = default;

                @* builder.OpenComponent<MudTextField<string>>(sequence++);
                builder.AddComponentParameter(sequence++, "Label", label);
                builder.CloseComponent(); *@

                break;

            case JsonObjectType.Object:

                if (data is null)
                    data = new JsonObject();

                RenderObject(
                    label, 
                    schema.ActualProperties,
                    (JsonObject)data,
                    builder, 
                    isTopLevel
                );

                break;

            case JsonObjectType.None:

                if (schema.OneOf.Count == 1)
                {
                    data = Render(
                        label,
                        schema.ActualSchema,
                        data,
                        builder,
                        isTopLevel
                    );
                }

                else
                {
                    throw new Exception("schema.OneOf.Count != 1 is not (yet) supported");
                }

                break;

            case JsonObjectType.Array:

                if (data is null)
                    data = new JsonArray();

                RenderArray(
                    label,
                    schema,
                    (JsonArray)data,
                    builder,
                    isTopLevel
                );

                break;

            default:
                throw new Exception($"{schema.Type} is not (yet) supported");
        }

        return data;
    }

    private void RenderObject(
        string? title,
        IReadOnlyDictionary<string, JsonSchemaProperty> properties, 
        JsonObject data,
        RenderTreeBuilder builder,
        bool isTopLevel)
    {
        var __builder = builder;
        var margin = isTopLevel ? "" : " margin-left: 1rem; margin-top: 1rem; margin-bottom: 1rem;";

        <div style="display: flex; flex-direction: column; gap: 1rem;@margin">

            <MudText Typo="Typo.h6">
                @title
            </MudText>

            @foreach (var entry in properties)
            {
                var (name, propertySchema) = entry;
                var label = propertySchema.Description ?? name;

                data.TryGetPropertyValue(name, out var propertyData);

                data[name] = Render(
                    label, 
                    propertySchema,
                    propertyData,
                    builder,
                    isTopLevel: false
                );
            }

        </div>
    }

    private void RenderArray(
        string? title,
        JsonSchema schema,
        JsonArray data,
        RenderTreeBuilder builder,
        bool isTopLevel)
    {
        var __builder = builder;
        var margin = isTopLevel ? "" : " margin-left: 1rem; margin-top: 1rem; margin-bottom: 1rem;";

        <div style="display: flex; flex-direction: column; gap: 1rem;@margin">

            <MudText Typo="Typo.h6">
                @title
            </MudText>

            <MudIconButton Icon="@Icons.Material.Filled.Add" />

        </div>
    }

    private void SetValue<T>(T value, JsonNode data)
    {
        data.ReplaceWith(value);

        if (DataChanged.HasDelegate)
            DataChanged.InvokeAsync(Data);
    }
}