@using Microsoft.AspNetCore.Components.Rendering
@using NJsonSchema
@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Runtime.CompilerServices
@using System.Numerics
@using System.Text.RegularExpressions

<div style="display: flex; flex-direction: column;">
    @_renderFragement
</div>

@code {

    private RenderFragment _renderFragement = default!;

    private Dictionary<string, RegexMask> _regexMaskCache = new();

    /// <summary>
    /// The JSON schema to create a form for.
    /// </summary>
    [Parameter]
    public JsonSchema Schema { get; set; } = default!;

    /// <summary>
    /// The JSON data store.
    /// </summary>
    [Parameter]
    public JsonNode? Data { get; set; } = default!;

    /// <summary>
    /// The JSON data store event callback.
    /// </summary>
    [Parameter]
    public EventCallback<JsonNode?> DataChanged { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    protected override void OnInitialized()
    {
        _renderFragement = builder =>
        {
            var oldData = Data is null
                ? null
                : Data.DeepClone();

            Data = Render(
                "Rocket settings", 
                Schema,
                Data,
                setValue: default,
                builder,
                isNullable: false,
                isTopLevel: true
            );

            if (JsonSerializer.Serialize(oldData) != JsonSerializer.Serialize(Data) && 
                DataChanged.HasDelegate)
            {
                DataChanged.InvokeAsync(Data);
            }
        };
    }

    private JsonNode? Render(
        string label,
        JsonSchema schema,
        JsonNode? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder,
        bool isNullable,
        bool isTopLevel
    )
    {
        var __builder = builder;
        isNullable |= schema.Type.HasFlag(JsonObjectType.Null);

        switch (schema.Type)
        {
            case JsonObjectType.Integer:
            case JsonObjectType.Integer | JsonObjectType.Null:

                if (schema.Enumeration.Any())
                {
                    var enumType = schema.Enumeration.ElementAt(0)!.GetType();

                    if (enumType == typeof(byte))
                        RenderEnum<byte>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else if (enumType == typeof(sbyte))
                        RenderEnum<sbyte>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else if (enumType == typeof(ushort))
                        RenderEnum<ushort>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else if (enumType == typeof(short))
                        RenderEnum<short>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else if (enumType == typeof(uint))
                        RenderEnum<uint>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else if (enumType == typeof(int))
                        RenderEnum<int>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else if (enumType == typeof(ulong))
                        RenderEnum<ulong>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else if (enumType == typeof(long))
                        RenderEnum<long>(label, isNullable, schema, (JsonValue?)data, setValue, builder);

                    else
                        throw new Exception($"Unexpected enum type {enumType.FullName}");
                }

                else
                {
                    switch (schema.Format)
                    {
                        case "byte":
                            RenderNumeric<byte>(label, isNullable, schema, (JsonValue?)data, setValue, builder);
                            break;

                        case "uint64":
                            RenderNumeric<ulong>(label, isNullable, schema, (JsonValue?)data, setValue, builder);
                            break;

                        case "int64":
                            RenderNumeric<long>(label, isNullable, schema, (JsonValue?)data, setValue, builder);
                            break;

                        default:
                            RenderNumeric<int>(label, isNullable, schema, (JsonValue?)data, setValue, builder);
                            break;
                    }
                }

                break;

            case JsonObjectType.Number:
            case JsonObjectType.Number | JsonObjectType.Null:

                switch (schema.Format)
                {
                    case "float":
                        RenderNumeric<float>(label, isNullable, schema, (JsonValue?)data, setValue, builder);
                        break;

                    case "double":
                        RenderNumeric<double>(label, isNullable, schema, (JsonValue?)data, setValue, builder);
                        break;

                    default:
                        throw new Exception($"schema.Format {schema.Format} is not (yet) supported");
                }

                break;

            case JsonObjectType.Boolean:
            case JsonObjectType.Boolean | JsonObjectType.Null:

                RenderBoolean(
                    label,
                    isNullable,
                    (JsonValue?)data,
                    setValue,
                    builder
                );

                break;

            case JsonObjectType.String:
            case JsonObjectType.String | JsonObjectType.Null:

                RenderString(
                    label,
                    isNullable,
                    schema,
                    (JsonValue?)data,
                    setValue,
                    builder
                );

                break;

            case JsonObjectType.Object:
            case JsonObjectType.Object | JsonObjectType.Null:

                if (schema.ActualSchema.AllowAdditionalProperties)
                {
                    if (schema.AdditionalPropertiesSchema is null)
                        throw new Exception("Additional properties schema is null.");

                    data = RenderDictionary(
                        label, 
                        isNullable,
                        schema.AdditionalPropertiesSchema,
                        (JsonObject?)data,
                        setValue,
                        builder, 
                        isTopLevel
                    );
                }

                else
                {
                    data = RenderObject(
                        label, 
                        isNullable,
                        schema.ActualProperties,
                        (JsonObject?)data,
                        setValue,
                        builder, 
                        isTopLevel
                    );
                }

                break;

            case JsonObjectType.None:

                if (schema.OneOf.Count == 1)
                {
                    data = Render(
                        label,
                        schema.OneOf.ElementAt(0).ActualSchema,
                        data,
                        setValue,
                        builder,
                        isNullable: false,
                        isTopLevel
                    );
                }

                else if (schema.OneOf.Count == 2 && schema.OneOf.ElementAt(0).Type == JsonObjectType.Null)
                {
                    data = Render(
                        label,
                        schema.OneOf.ElementAt(1).ActualSchema,
                        data,
                        setValue,
                        builder,
                        isNullable: true,
                        isTopLevel
                    );
                }

                else
                {
                    throw new Exception("schema.OneOf.Count > 2 is not supported");
                }

                break;

            case JsonObjectType.Array:
            case JsonObjectType.Array | JsonObjectType.Null:

                data = RenderArray(
                    label,
                    isNullable,
                    schema,
                    (JsonArray?)data,
                    setValue,
                    builder,
                    isTopLevel
                );

                break;

            default:
                throw new Exception($"{schema.Type} is not (yet) supported");
        }

        return data;
    }

    private JsonObject? RenderObject(
        string? title,
        bool isNullable,
        IReadOnlyDictionary<string, JsonSchemaProperty> properties, 
        JsonObject? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder,
        bool isTopLevel)
    {
        var __builder = builder;

        if (data is null && !isNullable)
            data = new JsonObject();

        var margin = isTopLevel ? "" : " margin-left: 1rem; margin-top: 1rem; margin-bottom: 1rem;";

        <div style="display: flex; flex-direction: column; gap: 1rem;@margin">

            <div style="display: flex;">

                <MudText
                    Style="flex: 1"
                    Typo="Typo.h6">
                    @title
                </MudText>

                @if (data is not null && isNullable)
                {
                    <MudTooltip Text="Set to null">
                        <MudIconButton
                            OnClick="() => setValue?.Invoke(default)"
                            Size="Size.Small"
                            Icon="@Icons.Material.Filled.Clear" />
                    </MudTooltip>
                }

            </div>

            @if (data is null)
            {
                <MudButton 
                    OnClick="() => setValue?.Invoke(new JsonObject())"
                    Variant="Variant.Outlined"
                    Color="Color.Primary">
                    Create
                </MudButton>
            }

            else
            {
                foreach (var entry in properties)
                {
                    var (name, propertySchema) = entry;
                    var label = propertySchema.Description ?? name;

                    data.TryGetPropertyValue(name, out var propertyData);

                    data[name] = Render(
                        label, 
                        propertySchema,
                        propertyData,
                        setValue: value =>
                        {
                            data[name] = value;

                            if (DataChanged.HasDelegate)
                                DataChanged.InvokeAsync(Data);
                        },
                        builder,
                        isNullable: false,
                        isTopLevel: false
                    );
                }
            }

        </div>

        return data;
    }

    private JsonObject? RenderDictionary(
        string? title,
        bool isNullable,
        JsonSchema valueSchema,
        JsonObject? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder,
        bool isTopLevel)
    {
        var __builder = builder;

        if (data is null && !isNullable)
            data = new JsonObject();

        var margin = isTopLevel ? "" : " margin-left: 1rem; margin-top: 1rem; margin-bottom: 1rem;";

        <div style="display: flex; flex-direction: column; gap: 1rem;@margin">

            <div style="display: flex;">

                <MudText
                    Style="flex: 1"
                    Typo="Typo.h6">
                    @title
                </MudText>

                @if (data is not null && isNullable)
                {
                    <MudTooltip Text="Set to null">
                        <MudIconButton
                            OnClick="() => setValue?.Invoke(default)"
                            Size="Size.Small"
                            Icon="@Icons.Material.Filled.Clear" />
                    </MudTooltip>
                }

            </div>

            @if (data is null)
            {
                <MudButton 
                    OnClick="() => setValue?.Invoke(new JsonObject())"
                    Variant="Variant.Outlined"
                    Color="Color.Primary">
                    Create
                </MudButton>
            }

            else
            {
                foreach (var (key, value) in data)
                {
                    <div style="display: flex;">

                        <div style="display: flex; flex-direction: column; flex: 1">

                            <MudTextField
                                Label="Key"
                                Variant="Variant.Text"
                                @bind-Value:get="key"
                                @bind-Value:set="newKey => 
                                {
                                    var value = data[key];

                                    data.Remove(key);
                                    data[newKey] = value;

                                    if (DataChanged.HasDelegate)
                                        DataChanged.InvokeAsync(Data);
                                }" />

                            @{
                                data[key] = Render(
                                    label: "Value",
                                    valueSchema,
                                    value,
                                    setValue: value =>
                                    {
                                        data[key] = value;

                                        if (DataChanged.HasDelegate)
                                            DataChanged.InvokeAsync(Data);
                                    },
                                    builder,
                                    isNullable: false,
                                    isTopLevel: false
                                );
                            }

                        </div>

                        <div>

                            <MudTooltip Text="Delete entry">
                                <MudIconButton
                                    OnClick="@(async () => 
                                    {
                                        var result = await DialogService.ShowMessageBox(
                                            "Confirmation required",
                                            "Are you sure to delete the selected element?", 
                                            yesText: "Yes", cancelText: "Cancel"
                                        );

                                        if (result.HasValue && result.Value)
                                        {
                                            data.Remove(key);

                                            if (DataChanged.HasDelegate)
                                                await DataChanged.InvokeAsync(Data);
                                        }
                                    })"
                                    Size="Size.Small"
                                    Icon="@Icons.Material.Filled.Delete" />
                            </MudTooltip>

                        </div>

                    </div>
                }

                @if (!data.ContainsKey(string.Empty))
                {
                    <div style="margin-left: auto; margin-right: auto;">
                        <MudIconButton 
                            Icon="@Icons.Material.Filled.Add"
                            OnClick="() => 
                            {
                                data.Add(string.Empty, default);

                                if (DataChanged.HasDelegate)
                                    DataChanged.InvokeAsync(Data);
                            }" />

                    </div>
                }
            }

        </div>

        return data;
    }

    private JsonArray? RenderArray(
        string? title,
        bool isNullable,
        JsonSchema schema,
        JsonArray? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder,
        bool isTopLevel)
    {
        if (schema.Item is null)
            throw new Exception("schema.Item is null");

        var __builder = builder;

        if (data is null && !isNullable)
            data = new JsonArray();

        var margin = isTopLevel ? "" : " margin-left: 1rem; margin-top: 1rem; margin-bottom: 1rem;";

        <div style="display: flex; flex-direction: column; gap: 1rem;@margin">

            <div style="display: flex;">

                <MudText
                    Style="flex: 1"
                    Typo="Typo.h6">
                    @title
                </MudText>

                @if (data is not null && isNullable)
                {
                    <MudTooltip Text="Set to null">
                        <MudIconButton
                            OnClick="() => setValue?.Invoke(default)"
                            Size="Size.Small"
                            Icon="@Icons.Material.Filled.Clear" />
                    </MudTooltip>
                }

            </div>

            @if (data is null)
            {
                <MudButton 
                    OnClick="() => setValue?.Invoke(new JsonArray())"
                    Variant="Variant.Outlined"
                    Color="Color.Primary">
                    Create
                </MudButton>
            }

            else
            {
                for (int i = 0; i < data.Count; i++)
                {
                    var i_captured = i;

                    <div style="display: flex;">
                        <div style="flex: 1;">
                            @{
                                data[i_captured] = Render(
                                    label: "#" + (i_captured + 1),
                                    schema.Item.ActualSchema,
                                    data[i_captured],
                                    setValue: value =>
                                    {
                                        data[i_captured] = value;

                                        if (DataChanged.HasDelegate)
                                            DataChanged.InvokeAsync(Data);
                                    },
                                    builder,
                                    isNullable: false,
                                    isTopLevel: false
                                )?.DeepClone();
                                /* DeepClone is required to avoid exception 
                                 * "The node already has a parent." which 
                                 * occurs due to multiple re-renderings and
                                 * only in combination with JsonArray.
                                 */
                            }
                        </div>

                        <div>
                            <MudMenu Size="Size.Small" Icon="@Icons.Material.Filled.MoreVert">

                                @if (i_captured != 0)
                                {
                                    <MudMenuItem
                                        OnClick="() => MoveUp(data, i_captured)"
                                        Icon="@Icons.Material.Filled.ArrowUpward">
                                        Move up
                                    </MudMenuItem>
                                }

                                @if (i_captured != data.Count - 1)
                                {
                                    <MudMenuItem
                                        OnClick="() => MoveDown(data, i_captured)"
                                        Icon="@Icons.Material.Filled.ArrowDownward">
                                        Move down
                                    </MudMenuItem>
                                }
                                
                                <MudMenuItem
                                    OnClick="() => Delete(data, i_captured)"
                                    Icon="@Icons.Material.Filled.Delete">
                                    Delete
                                </MudMenuItem>
                            </MudMenu>
                        </div>
                    </div>
                }

                <div style="margin-left: auto; margin-right: auto;">
                    <MudIconButton 
                        Icon="@Icons.Material.Filled.Add"
                        OnClick="() => 
                        {
                            data.Add(default);

                            if (DataChanged.HasDelegate)
                                DataChanged.InvokeAsync(Data);
                        }" />

                </div>
            }

        </div>

        return data;
    }

    private void RenderNumeric<T>(
        string label,
        bool isNullable,
        JsonSchema schema,
        JsonValue? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder) where T : struct, IMinMaxValue<T>, INumber<T>, IBitwiseOperators<T, T, T>
    {
        var __builder = builder;

        <MudNumericField
            Label="@label"
            Required="!isNullable"
            Min="schema.Minimum.HasValue ? T.CreateChecked(schema.Minimum.Value) : T.MinValue"
            Max="schema.Maximum.HasValue ? T.CreateChecked(schema.Maximum.Value) : T.MaxValue"
            @bind-Value:get="data is null ? null : data.GetValue<T?>()"
            @bind-Value:set="value => setValue?.Invoke(JsonValue.Create(value))" />
    }

    private void RenderBoolean(
        string label,
        bool isNullable,
        JsonValue? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder
    )
    {
        var __builder = builder;

        <MudCheckBox
            Class="@(isNullable ? null : "mud-input-required")"
            Label="@label"
            Color="@Color.Primary"
            TriState="true"
            Validation="isNullable ? null : (Func<bool?, IEnumerable<string>>)(BooleanValidation)"
            @bind-Value:get="data is null ? default(bool?) : data.GetValue<bool>()"
            @bind-Value:set="value => setValue?.Invoke(JsonValue.Create(value))" />
    }

    private void RenderString(
        string label,
        bool isNullable,
        JsonSchema schema,
        JsonValue? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder
    )
    {
        var __builder = builder;

        <MudTextField
            Label="@label"
            Required="!isNullable"
            MaxLength="schema.MaxLength is null ? int.MaxValue : (int)schema.MaxLength"
            Counter="schema.MaxLength is null ? null : schema.MaxLength"
            Validation="schema.Pattern is null ? null : (Func<string, IEnumerable<string>>)(value => RegexValidation(value, schema.Pattern))"
            Clearable="true"
            OnClearButtonClick="() => setValue?.Invoke(default)"
            @bind-Value:get="data is null ? null : data.GetValue<string>()"
            @bind-Value:set="value => setValue?.Invoke(JsonValue.Create(value))" />
    }

    private void RenderEnum<T>(
        string label,
        bool isNullable,
        JsonSchema schema,
        JsonValue? data,
        Action<JsonNode?>? setValue,
        RenderTreeBuilder builder) where T : struct, INumber<T>, IBitwiseOperators<T, T, T>
    {
        var __builder = builder;

        var valueNamePairs = schema
            .Enumeration
            .Cast<T>()
            .Zip(schema.EnumerationNames)
            .ToList();

        if (schema.IsFlagEnumerable)
        {
            <MudSelectEnhanced
                T="T?"
                Label="@label"
                Required="!isNullable"
                MultiSelection="true"
                ToStringFunc="item => valueNamePairs.First(x => x.First.Equals(item)).Second"
                Clearable="true"
                OnClearButtonClick="() => setValue?.Invoke(default)"
                JsonValue="data"
                @bind-SelectedValues:get="data is null ? Enumerable.Empty<T?>() : FromFlags((T)data.GetValue<T?>()!).Select(x => (T?)x)"
                @bind-SelectedValues:set="value => setValue?.Invoke(JsonValue.Create(ToFlags(value.Select(x => (T)x!))))">

                @foreach (var valueNamePair in valueNamePairs)
                {
                    <MudSelectItem Value="(T?)valueNamePair.First" />
                }

            </MudSelectEnhanced>
        }

        else
        {
            <MudSelect
                T="T?"
                Label="@label"
                Required="!isNullable"
                ToStringFunc="item => valueNamePairs.First(x => x.First.Equals(item)).Second"
                Clearable="true"
                OnClearButtonClick="() => setValue?.Invoke(default)"
                @bind-Value:get="data is null ? null : data.GetValue<T?>()"
                @bind-Value:set="value => setValue?.Invoke(JsonValue.Create(value))">

                @foreach (var valueNamePair in valueNamePairs)
                {
                    <MudSelectItem Value="(T?)valueNamePair.First" />
                }

            </MudSelect>
        }
    }

    private IEnumerable<T> FromFlags<T>(T value) where T : INumber<T>, IBitwiseOperators<T, T, T>
    {
        var result = new List<T>();
        var two = T.One + T.One;

        for (int i = 0; i < Unsafe.SizeOf<T>() * 8; i++)
        {
            // this mimics the bit-shift operator (1 << i) as no generic math equivalent was found
            var shiftedOne = T.One;

            for (int j = 0; j < i; j++)
            {
                shiftedOne = shiftedOne * two;
            }

            // now continue as normal
            var isBitSet = (value & shiftedOne) > T.Zero;

            if (isBitSet)
                result.Add(shiftedOne);
        }

        return result;
    }

    // Generic math: sum
    // https://stackoverflow.com/a/73906555
    private T ToFlags<T>(IEnumerable<T> numbers) where T : INumber<T>
    {
        return numbers.Aggregate(T.Zero, (sum, value) => sum + T.CreateChecked(value));
    }

    private void MoveUp(JsonArray data, int position)
    {
        var item = data[position];

        data.RemoveAt(position);
        data.Insert(position - 1, item);

        if (DataChanged.HasDelegate)
            DataChanged.InvokeAsync(Data);
    }

    private void MoveDown(JsonArray data, int position)
    {
        var item = data[position];

        data.RemoveAt(position);
        data.Insert(position + 1, item);

        if (DataChanged.HasDelegate)
            DataChanged.InvokeAsync(Data);
    }

    private async Task Delete(JsonArray data, int position)
    {
        var result = await DialogService.ShowMessageBox(
            "Confirmation required",
            "Are you sure to delete the selected element?", 
            yesText: "Yes", cancelText: "Cancel"
        );

        if (result.HasValue && result.Value)
        {
            data.RemoveAt(position);

            if (DataChanged.HasDelegate)
                await DataChanged.InvokeAsync(Data);
        }
    }

    private RegexMask GetRegexMask(string mask)
    {
        if (!_regexMaskCache.TryGetValue(mask, out var regexMask))
        {
            regexMask = new RegexMask(mask);
            _regexMaskCache[mask] = regexMask;
        }

        return regexMask;
    }

    private IEnumerable<string> BooleanValidation(bool? value)
    {
        if (value.HasValue)
            return Enumerable.Empty<string>();

        else
            return ["Required"];
    }

    private IEnumerable<string> RegexValidation(string? input, string pattern)
    {
        if (input is null)
            return ["Required"];

        else if (Regex.IsMatch(input, pattern))
            return Enumerable.Empty<string>();

        else
            return ["The input does not match the expected pattern"];
    }
}