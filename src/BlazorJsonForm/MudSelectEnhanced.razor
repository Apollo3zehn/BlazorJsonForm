@using System.Text.Json.Nodes
@inherits MudSelect<T>
@typeparam T

@{
    base.BuildRenderTree(__builder);
}

@code
{
    /* Problem:
     * 
     * When we use a MudSelect in combination with MultiSelection="true" and
     * Required="true" to represent an enum with a [Flags] attribute, it is 
     * difficult to track if the value is null or empty (0). Normally this
     * combination would now allow having no selected values (i.e. no flags
     * set) but in reality this is a valid value. Only null should be invalid
     * in case Required="true". MudSelect also does not support resetting the
     * value to null, so this is also being worked around.
     */

    private bool _hasValue;

    protected override void OnParametersSet()
    {
        var originalSelectedValuesChanged = SelectedValuesChanged;

        SelectedValuesChanged = new EventCallback<IEnumerable<T>>(this, async () =>
        {
            if (originalSelectedValuesChanged.HasDelegate)
                await originalSelectedValuesChanged.InvokeAsync(SelectedValues);

            _hasValue = true;
            await Validate();
        });
    }

    protected override bool HasValue(T value)
    {
        if (MultiSelection)
            return _hasValue;

        else
            return base.HasValue(value);
    }

#pragma warning disable BL0007
    [Parameter]
    public Action EnhancedOnClearButtonClick
    {
        set
        {
            Func<Task> realCallback = () =>
            {
                value();
                _hasValue = false;
                
                return Validate();
            };

            OnClearButtonClick = new EventCallback<MouseEventArgs>(this, realCallback);
        }
    }
#pragma warning restore BL0007
}